
#!/bin/bash
# Encrypts a password with Unbound CORE Client software
# See ub-get-password script for more info
set -e

UB_PARTITION=${UB_PARTITION:-'encfs'}

# use default user if not set
UB_USER=${UB_USER:=user}

# For additional security an Unbound CORE user with a password can be used
if [[ -n "$UB_USER_PASSWORD" ]]; then
    PASSWORD_ARG="-w $UB_USER_PASSWORD"
fi

# The key name
if [[ -z "${UB_KEY_NAME}" ]]; then
    echo "Environment variable UB_KEY_NAME must be set with Unbound CORE KMS key name for encryption"
    echo "The key must be an RSA key which was created in partition '$UB_PARTITION'"
    exit 1
fi

# The full path and filename for storing the encrypted passphrase 
# The encrypted passphrase file contains both the cipher and the UID of the 
# CORE key that was used for encrypting it
UB_PASSWORD_FILE=${UB_PASSWORD_FILE:=${PWD}/encfs_pass_ucl.bin}

exit_on_error() {
    set +e
    result=$($1)
    err=$?
    if [ $err -ne 0 ]; then
        set +e
        $1;
        exit $ret
    fi
    set -e
    printf "%s\n" $result
}

# check connection to ukc
set +e
ucl list -p $UB_PARTITION > /dev/null
ret=$?
if [ $ret -ne 0 ]; then
    echo "ucl list -p $UB_PARTITION "
    ucl list -p $UB_PARTITION 
    echo "Failed to connect to Unbound CORE partition '${UB_PARTITION}'."
    echo "Please check your Unbound client installation and settings"
    exit $ret
fi
set -e

#### 1. Get the passowrd either by decrypting it from a 
####    previously saved encrypted data or by generating a new one
if test -f "$UB_PASSWORD_FILE"; then
    set +e
    # since ucl may write warnings to the output stream we take the last line which is the
    # decrypted data
    out=$(exit_on_error "ucl decrypt --user $UB_USER $PASSWORD_ARG -p ${UB_PARTITION} -i ${UB_PASSWORD_FILE} -o /dev/stdout")
    PASSPHRASE_B64=$( echo "$out"  | tail -1) 
    set -e
fi
# In case password reset was requested 
if [[ "${RESET_PASSWORD}" == "YES" ]]; then
    unset PASSPHRASE_B64    
fi

# If no previously decrypted password, or if explicit reset requeted create a new random password
PASSPHRASE_B64=${PASSPHRASE_B64:=$(head -c 128 /dev/random | base64 -w 0)}

#### 2. Encrypt the password using the latest version of Unbound CORE key 
####    The key version changes every time the key is rotated either manually
####    or automatically. Versions are identified by distinct UID's
echo $PASSPHRASE_B64 | ucl encrypt --user $UB_USER $PASSWORD_ARG -p $UB_PARTITION -n $UB_KEY_NAME -i /dev/stdin -o $UB_PASSWORD_FILE 1>/dev/null

#### 3. Return the cleartext password
echo $PASSPHRASE_B64
